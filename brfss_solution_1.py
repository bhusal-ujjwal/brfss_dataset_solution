# -*- coding: utf-8 -*-
"""brfss_solution_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12y6naok-5VPUa8r6Jxo7x7KeP9zdK6mZ
"""

#Import libraries and load dataset from own github
import pandas as pd
brfss = pd.read_csv("https://raw.githubusercontent.com/bhusal-ujjwal/time_series/main/ITEC610_assessment3_data.csv")

#view dataset details
brfss

#shape of the dateset
brfss.shape

# view column details to check null values
brfss.info(max_cols=1147)



#fill the null values with mean value as well.
brfss.drop(columns=['Unnamed: 0'], inplace=True)
brfss["age"] = brfss["age"].fillna(brfss["age"].mean())
brfss["weight2"] = brfss["weight2"].fillna(brfss["weight2"].mean())
brfss["wtyrago"] = brfss["wtyrago"].fillna(brfss["wtyrago"].mean())
brfss["wtkg2"] = brfss["wtkg2"].fillna(brfss["wtkg2"].mean())
brfss["htm3"] = brfss["htm3"].fillna(brfss["htm3"].mean())

print(brfss)

# Remove duplicate entries
brfss.drop_duplicates(inplace=True)



# Data after preprocessing
brfss.info()



# Renaming columns for clarity
brfss.rename(columns={'weight2': 'current_weight', 'wtyrago': 'weight_a_year_ago','wtkg2': 'weight_2decimal', 'htm3': 'height'}, inplace=True)

# Data after renaming columns
brfss.info()









#Task 1 summary statistics graph
import numpy as np
import matplotlib.pyplot as plt
summary_stats = {}
for column in ['current_weight', 'weight_a_year_ago', 'height']:
    summary_stats[column] = {
        'mean': brfss[column].mean(),
        'median': brfss[column].median(),
        'std': brfss[column].std(),
        '25perc': brfss[column].quantile(0.25),
        '75perc': brfss[column].quantile(0.75),
        'min': brfss[column].min(),
        'max': brfss[column].max(),
    }

# Step 4: Plot the summary statistics
fig, ax = plt.subplots()

x_labels = ['Current weight', 'Weight a year ago', 'Height']
x = np.arange(len(x_labels))
width = 0.1  # the width of the bars

# Define the positions of the points to be plotted
positions = {
    'max': x - 2*width,
    'min': x - width,
    'mean': x,
    'median': x + width,
    'mean+std': x + 2*width,
    'mean-std': x + 3*width,
    '75perc': x + 4*width,
    '25perc': x + 5*width,
}

# Plotting the points
for stat, pos in positions.items():
    if '+' in stat or '-' in stat:
        if '+' in stat:
            values = [summary_stats[col]['mean'] + summary_stats[col]['std'] for col in summary_stats]
        else:
            values = [summary_stats[col]['mean'] - summary_stats[col]['std'] for col in summary_stats]
    else:
        values = [summary_stats[col][stat] for col in summary_stats]
    marker = 'v' if stat == 'max' else '^' if stat == 'min' else 'X' if stat == 'mean' else 'x' if stat == 'median' else '>' if '+' in stat else '<'
    ax.scatter(pos, values, marker=marker, label=stat)

# Adding labels, legend and title
ax.set_xticks(x)
ax.set_xticklabels(x_labels)
ax.set_ylabel('Values')
ax.set_title('Summary Statistics')
ax.legend()

# Display the plot
plt.show()





# Task 2: Calculate correlation
# Calculate weight_change
brfss['weight_change'] = brfss['current_weight'] - brfss['weight_a_year_ago']

# Calculate correlation
correlation_current_weight = brfss['weight_change'].corr(brfss['current_weight'])
correlation_weight_a_year_ago = brfss['weight_change'].corr(brfss['weight_a_year_ago'])
correlation_age = brfss['weight_change'].corr(brfss['age'])

print("Correlation between weight_change and current_weight:", correlation_current_weight)
print("Correlation between weight_change and weight_a_year_ago:", correlation_weight_a_year_ago)
print("Correlation between weight_change and age:", correlation_age)

# Plot scatter plots
plt.figure(figsize=(18, 6))

# Scatter plot for current_weight
plt.subplot(1, 3, 1)
plt.scatter(brfss['current_weight'], brfss['weight_change'], alpha=0.5)
plt.title('Scatter Plot: Weight Change vs Current Weight')
plt.xlabel('Current Weight')
plt.ylabel('Weight Change')

# Scatter plot for weight_a_year_ago
plt.subplot(1, 3, 2)
plt.scatter(brfss['weight_a_year_ago'], brfss['weight_change'], alpha=0.5)
plt.title('Scatter Plot: Weight Change vs Weight a Year Ago')
plt.xlabel('Weight a Year Ago')
plt.ylabel('Weight Change')

# Scatter plot for age
plt.subplot(1, 3, 3)
plt.scatter(brfss['age'], brfss['weight_change'], alpha=0.5)
plt.title('Scatter Plot: Weight Change vs Age')
plt.xlabel('Age')
plt.ylabel('Weight Change')

plt.tight_layout()
plt.show()



# Task 3
from sklearn.linear_model import LinearRegression

# Given data
house_sizes = [[1500], [2000], [2500], [3000], [3500]]
house_prices = [250000, 300000, 330000, 360000, 390000]

# Create and train the linear regression model
model = LinearRegression()
model.fit(house_sizes, house_prices)

# Predict house price for 2500 sqft
predicted_price_2500 = model.predict([[2500]])

print("Predicted price for a house with 2500 sqft:", predicted_price_2500[0])

